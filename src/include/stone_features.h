#ifndef __STONE_FEATURES
#define __STONE_FEATURES

#include "sys/types.h"

/*
 * Each time we reclaim bits for reuse we need to specify another
 * bitmask that, if all bits are set, indicates we have the new
 * incarnation of that feature.  Base case is 1 (first use)
 */
#define STONE_FEATURE_INCARNATION_1 (0ull)
#define STONE_FEATURE_INCARNATION_2 (1ull<<57)              // SERVER_JEWEL
#define STONE_FEATURE_INCARNATION_3 ((1ull<<57)|(1ull<<28)) // SERVER_MIMIC

#define DEFINE_STONE_FEATURE(bit, incarnation, name)			\
	const static uint64_t STONE_FEATURE_##name = (1ULL<<bit);		\
	const static uint64_t STONE_FEATUREMASK_##name =			\
		(1ULL<<bit | STONE_FEATURE_INCARNATION_##incarnation);

// this bit is ignored but still advertised by release *when*
#define DEFINE_STONE_FEATURE_DEPRECATED(bit, incarnation, name, when) \
	const static uint64_t DEPRECATED_STONE_FEATURE_##name = (1ULL<<bit); \
	const static uint64_t DEPRECATED_STONE_FEATUREMASK_##name =		\
		(1ULL<<bit | STONE_FEATURE_INCARNATION_##incarnation);

// this bit is ignored by release *unused* and not advertised by
// release *unadvertised*
#define DEFINE_STONE_FEATURE_RETIRED(bit, inc, name, unused, unadvertised)


// test for a feature.  this test is safer than a typical mask against
// the bit because it ensures that we have the bit AND the marker for the
// bit's incarnation.  this must be used in any case where the features
// bits may include an old meaning of the bit.
#define HAVE_FEATURE(x, name)				\
	(((x) & (STONE_FEATUREMASK_##name)) == (STONE_FEATUREMASK_##name))


/*
 * Notes on deprecation:
 *
 * For feature bits used *only* on the server-side:
 *
 *  - In the first phase we indicate that a feature is DEPRECATED as of
 *    a particular release.  This is the first major release X (say,
 *    mimic) that does not depend on its peers advertising the feature.
 *    That is, it safely assumes its peers all have the feature.  We
 *    indicate this with the DEPRECATED macro.  For example,
 *
 *      DEFINE_STONE_FEATURE_DEPRECATED( 2, 1, MON_METADATA, MIMIC)
 *
 *    because 13.2.z (mimic) did not care if its peers advertised this
 *    feature bit.
 *
 *  - In the second phase we stop advertising the the bit and call it
 *    RETIRED.  This can normally be done 2 major releases
 *    following the one in which we marked the feature DEPRECATED.  In
 *    the above example, for 15.0.z (octopus) we can say:
 *
 *      DEFINE_STONE_FEATURE_RETIRED( 2, 1, MON_METADATA, MIMIC, OCTOPUS)
 *
 *  - The bit can be reused in the next release that will never talk to
 *    a pre-octopus daemon (13 mimic or 14 nautlius) that advertises the
 *    bit: in this case, the 16.y.z (P-release).
 *
 * This ensures that no two versions who have different meanings for
 * the bit ever speak to each other.
 */

/*
 * Notes on the kernel client:
 *
 * - "X" means that the feature bit has been advertised and supported
 *   since kernel X
 *
 * - "X req" means that the feature bit has been advertised and required
 *   since kernel X
 *
 * The remaining feature bits are not and have never been used by the
 * kernel client.
 */

DEFINE_STONE_FEATURE( 0, 1, UID)
DEFINE_STONE_FEATURE( 1, 1, NOSRCADDR)        // 2.6.35 req
DEFINE_STONE_FEATURE_RETIRED( 2, 1, MONCLOCKCHECK, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE( 2, 3, SERVER_NAUTILUS)
DEFINE_STONE_FEATURE( 3, 1, FLOCK)            // 2.6.36
DEFINE_STONE_FEATURE( 4, 1, SUBSCRIBE2)       // 4.6 req
DEFINE_STONE_FEATURE( 5, 1, MONNAMES)
DEFINE_STONE_FEATURE( 6, 1, RECONNECT_SEQ)    // 3.10 req
DEFINE_STONE_FEATURE( 7, 1, DIRLAYOUTHASH)    // 2.6.38
DEFINE_STONE_FEATURE( 8, 1, OBJECTLOCATOR)
DEFINE_STONE_FEATURE( 9, 1, PGID64)           // 3.9 req
DEFINE_STONE_FEATURE(10, 1, INCSUBOSDMAP)
DEFINE_STONE_FEATURE(11, 1, PGPOOL3)          // 3.9 req
DEFINE_STONE_FEATURE(12, 1, OSDREPLYMUX)
DEFINE_STONE_FEATURE(13, 1, OSDENC)           // 3.9 req
DEFINE_STONE_FEATURE_RETIRED(14, 1, OMAP, HAMMER, JEWEL)
DEFINE_STONE_FEATURE(14, 2, SERVER_KRAKEN)
DEFINE_STONE_FEATURE(15, 1, MONENC)
DEFINE_STONE_FEATURE_RETIRED(16, 1, QUERY_T, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(16, 3, SERVER_OCTOPUS)
DEFINE_STONE_FEATURE(16, 3, OSD_REPOP_MLCOD)
DEFINE_STONE_FEATURE_RETIRED(17, 1, INDEP_PG_MAP, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(17, 3, OS_PERF_STAT_NS)
DEFINE_STONE_FEATURE(18, 1, CRUSH_TUNABLES)   // 3.6
DEFINE_STONE_FEATURE_RETIRED(19, 1, CHUNKY_SCRUB, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(19, 2, OSD_PGLOG_HARDLIMIT)
DEFINE_STONE_FEATURE_RETIRED(20, 1, MON_NULLROUTE, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(20, 3, SERVER_PACIFIC)
DEFINE_STONE_FEATURE_RETIRED(21, 1, MON_GV, HAMMER, JEWEL)
DEFINE_STONE_FEATURE(21, 2, SERVER_LUMINOUS)  // 4.13
DEFINE_STONE_FEATURE(21, 2, RESEND_ON_SPLIT)  // overlap
DEFINE_STONE_FEATURE(21, 2, RADOS_BACKOFF)    // overlap
DEFINE_STONE_FEATURE(21, 2, OSDMAP_PG_UPMAP)  // overlap
DEFINE_STONE_FEATURE(21, 2, CRUSH_CHOOSE_ARGS) // overlap
DEFINE_STONE_FEATURE_RETIRED(22, 1, BACKFILL_RESERVATION, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(22, 2, OSD_FIXED_COLLECTION_LIST)
DEFINE_STONE_FEATURE(23, 1, MSG_AUTH)         // 3.19 req (unless nostonex_require_signatures)
DEFINE_STONE_FEATURE_RETIRED(24, 1, RECOVERY_RESERVATION, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(24, 2, RECOVERY_RESERVATION_2)
DEFINE_STONE_FEATURE(25, 1, CRUSH_TUNABLES2)  // 3.9
DEFINE_STONE_FEATURE(26, 1, CREATEPOOLID)
DEFINE_STONE_FEATURE(27, 1, REPLY_CREATE_INODE) // 3.9
DEFINE_STONE_FEATURE_RETIRED(28, 1, OSD_HBMSGS, HAMMER, JEWEL)
DEFINE_STONE_FEATURE(28, 2, SERVER_MIMIC)
DEFINE_STONE_FEATURE(29, 1, MDSENC)           // 4.7
DEFINE_STONE_FEATURE(30, 1, OSDHASHPSPOOL)    // 3.9
DEFINE_STONE_FEATURE_DEPRECATED(31, 1, MON_SINGLE_PAXOS, NAUTILUS)
DEFINE_STONE_FEATURE_RETIRED(32, 1, OSD_SNAPMAPPER, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE(32, 3, STRETCH_MODE)
DEFINE_STONE_FEATURE_RETIRED(33, 1, MON_SCRUB, JEWEL, LUMINOUS)
// available
DEFINE_STONE_FEATURE_RETIRED(34, 1, OSD_PACKED_RECOVERY, JEWEL, LUMINOUS)
// available
DEFINE_STONE_FEATURE(35, 1, OSD_CACHEPOOL)    // 3.14
DEFINE_STONE_FEATURE(36, 1, CRUSH_V2)         // 3.14
DEFINE_STONE_FEATURE(37, 1, EXPORT_PEER)      // 3.14
DEFINE_STONE_FEATURE_RETIRED(38, 1, OSD_ERASURE_CODES, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE(39, 1, OSDMAP_ENC)       // 3.15
DEFINE_STONE_FEATURE(40, 1, MDS_INLINE_DATA)  // 3.19
DEFINE_STONE_FEATURE(41, 1, CRUSH_TUNABLES3)  // 3.15
DEFINE_STONE_FEATURE(41, 1, OSD_PRIMARY_AFFINITY) // overlap
DEFINE_STONE_FEATURE(42, 1, MSGR_KEEPALIVE2)  // 4.3 (for consistency)
DEFINE_STONE_FEATURE(43, 1, OSD_POOLRESEND)   // 4.13
DEFINE_STONE_FEATURE_RETIRED(44, 1, ERASURE_CODE_PLUGINS_V2, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE_RETIRED(45, 1, OSD_SET_ALLOC_HINT, JEWEL, LUMINOUS)
// available
DEFINE_STONE_FEATURE(46, 1, OSD_FADVISE_FLAGS)
DEFINE_STONE_FEATURE_RETIRED(46, 1, OSD_REPOP, JEWEL, LUMINOUS) // overlap
DEFINE_STONE_FEATURE_RETIRED(46, 1, OSD_OBJECT_DIGEST, JEWEL, LUMINOUS) // overlap
DEFINE_STONE_FEATURE_RETIRED(46, 1, OSD_TRANSACTION_MAY_LAYOUT, JEWEL, LUMINOUS) // overlap
DEFINE_STONE_FEATURE(47, 1, MDS_QUOTA)        // 4.17
DEFINE_STONE_FEATURE(48, 1, CRUSH_V4)         // 4.1
DEFINE_STONE_FEATURE_RETIRED(49, 1, OSD_MIN_SIZE_RECOVERY, JEWEL, LUMINOUS)
DEFINE_STONE_FEATURE_RETIRED(49, 1, OSD_PROXY_FEATURES, JEWEL, LUMINOUS) // overlap
// available
DEFINE_STONE_FEATURE_RETIRED(50, 1, MON_METADATA, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE_RETIRED(51, 1, OSD_BITWISE_HOBJ_SORT, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE_RETIRED(52, 1, OSD_PROXY_WRITE_FEATURES, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE_RETIRED(53, 1, ERASURE_CODE_PLUGINS_V3, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE_RETIRED(54, 1, OSD_HITSET_GMT, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE_RETIRED(55, 1, HAMMER_0_94_4, MIMIC, OCTOPUS)
// available
DEFINE_STONE_FEATURE(56, 1, NEW_OSDOP_ENCODING) // 4.13 (for pg_pool_t >= v25)
DEFINE_STONE_FEATURE(57, 1, MON_STATEFUL_SUB) // 4.13
DEFINE_STONE_FEATURE_RETIRED(57, 1, MON_ROUTE_OSDMAP, MIMIC, OCTOPUS) // overlap
DEFINE_STONE_FEATURE(57, 1, SERVER_JEWEL) // overlap
DEFINE_STONE_FEATURE(58, 1, CRUSH_TUNABLES5)  // 4.5
DEFINE_STONE_FEATURE(58, 1, NEW_OSDOPREPLY_ENCODING) // overlap
DEFINE_STONE_FEATURE(58, 1, FS_FILE_LAYOUT_V2) // overlap
DEFINE_STONE_FEATURE(59, 1, FS_BTIME)
DEFINE_STONE_FEATURE(59, 1, FS_CHANGE_ATTR) // overlap
DEFINE_STONE_FEATURE(59, 1, MSG_ADDR2) // overlap
DEFINE_STONE_FEATURE(60, 1, OSD_RECOVERY_DELETES) // *do not share this bit*
DEFINE_STONE_FEATURE(61, 1, STONEX_V2)         // 4.19, *do not share this bit*

DEFINE_STONE_FEATURE(62, 1, RESERVED)           // do not use; used as a sentinel
DEFINE_STONE_FEATURE_DEPRECATED(63, 1, RESERVED_BROKEN, LUMINOUS) // client-facing


/*
 * Features supported.  Should be everything above.
 */
#define STONE_FEATURES_ALL		 \
	(STONE_FEATURE_UID |		 \
	 STONE_FEATURE_NOSRCADDR |	 \
	 STONE_FEATURE_FLOCK |		 \
	 STONE_FEATURE_SUBSCRIBE2 |	 \
	 STONE_FEATURE_MONNAMES |	 \
	 STONE_FEATURE_RECONNECT_SEQ |	 \
	 STONE_FEATURE_DIRLAYOUTHASH |	 \
	 STONE_FEATURE_OBJECTLOCATOR |	 \
	 STONE_FEATURE_PGID64 |		 \
	 STONE_FEATURE_INCSUBOSDMAP |	 \
	 STONE_FEATURE_PGPOOL3 |		 \
	 STONE_FEATURE_OSDREPLYMUX |	 \
	 STONE_FEATURE_OSDENC |		 \
	 STONE_FEATURE_MONENC |		 \
	 STONE_FEATURE_CRUSH_TUNABLES |	 \
	 STONE_FEATURE_MSG_AUTH |	     \
	 STONE_FEATURE_CRUSH_TUNABLES2 |	     \
	 STONE_FEATURE_CREATEPOOLID |	     \
	 STONE_FEATURE_REPLY_CREATE_INODE |   \
	 STONE_FEATURE_MDSENC |			\
	 STONE_FEATURE_OSDHASHPSPOOL |       \
	 STONE_FEATURE_NEW_OSDOP_ENCODING |        \
         STONE_FEATURE_NEW_OSDOPREPLY_ENCODING | \
	 DEPRECATED_STONE_FEATURE_MON_SINGLE_PAXOS |    \
	 STONE_FEATURE_OSD_CACHEPOOL |	    \
	 STONE_FEATURE_CRUSH_V2 |	    \
	 STONE_FEATURE_EXPORT_PEER |	    \
	 STONE_FEATURE_OSDMAP_ENC |          \
	 STONE_FEATURE_MDS_INLINE_DATA |	    \
	 STONE_FEATURE_CRUSH_TUNABLES3 |	    \
	 STONE_FEATURE_OSD_PRIMARY_AFFINITY |	\
	 STONE_FEATURE_MSGR_KEEPALIVE2 |	\
	 STONE_FEATURE_OSD_POOLRESEND |	\
	 STONE_FEATURE_OSD_FADVISE_FLAGS |     \
	 STONE_FEATURE_MDS_QUOTA | \
         STONE_FEATURE_CRUSH_V4 |	     \
	 STONE_FEATURE_MON_STATEFUL_SUB |	 \
	 STONE_FEATURE_CRUSH_TUNABLES5 |	    \
	 STONE_FEATURE_SERVER_JEWEL |  \
	 STONE_FEATURE_FS_FILE_LAYOUT_V2 |		 \
	 STONE_FEATURE_SERVER_KRAKEN |	\
	 STONE_FEATURE_FS_BTIME |			 \
	 STONE_FEATURE_FS_CHANGE_ATTR |			 \
	 STONE_FEATURE_MSG_ADDR2 | \
	 STONE_FEATURE_SERVER_LUMINOUS |		\
	 STONE_FEATURE_RESEND_ON_SPLIT |		\
	 STONE_FEATURE_RADOS_BACKOFF |		\
	 STONE_FEATURE_OSD_RECOVERY_DELETES |	\
	 STONE_FEATURE_SERVER_MIMIC |		\
	 STONE_FEATURE_RECOVERY_RESERVATION_2 |	\
	 STONE_FEATURE_SERVER_NAUTILUS |		\
	 STONE_FEATURE_STONEX_V2 | \
	 STONE_FEATURE_OSD_PGLOG_HARDLIMIT | \
	 STONE_FEATUREMASK_SERVER_OCTOPUS | \
	 STONE_FEATUREMASK_STRETCH_MODE | \
	 STONE_FEATUREMASK_OSD_REPOP_MLCOD | \
	 STONE_FEATUREMASK_SERVER_PACIFIC | \
	 STONE_FEATURE_OSD_FIXED_COLLECTION_LIST | \
	 0ULL)

#define STONE_FEATURES_SUPPORTED_DEFAULT  STONE_FEATURES_ALL

/*
 * crush related features
 */
#define STONE_FEATURES_CRUSH			\
	(STONE_FEATURE_CRUSH_TUNABLES |		\
	 STONE_FEATURE_CRUSH_TUNABLES2 |		\
	 STONE_FEATURE_CRUSH_TUNABLES3 |		\
	 STONE_FEATURE_CRUSH_TUNABLES5 |		\
	 STONE_FEATURE_CRUSH_V2 |		\
	 STONE_FEATURE_CRUSH_V4 |		\
	 STONE_FEATUREMASK_CRUSH_CHOOSE_ARGS)

/*
 * make sure we don't try to use the reserved features
 */
#define STONE_STATIC_ASSERT(x) (void)(sizeof(int[((x)==0) ? -1 : 0]))

static inline void ____build_time_check_for_reserved_bits(void) {
	STONE_STATIC_ASSERT((STONE_FEATURES_ALL &
			    (STONE_FEATURE_RESERVED |
			     DEPRECATED_STONE_FEATURE_RESERVED_BROKEN)) == 0);
}

#endif
