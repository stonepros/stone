tasks:
- vip:

# make sure stoneadm notices the new IP
- stoneadm.shell:
    host.a:
      - stone orch device ls --refresh

# stop kernel nfs server, if running
- vip.exec:
    all-hosts:
      - systemctl stop nfs-server

- stoneadm.shell:
    host.a:
      - stone orch apply rgw foorgw --port 8800
      - stone nfs cluster create foo --ingress --virtual-ip {{VIP0}}/{{VIPPREFIXLEN}}

- vip.exec:
    host.a:
      - dnf install -y python3-boto3 || apt install -y python3-boto3
      - /home/ubuntu/stonetest/stoneadm shell radosgw-admin user create --uid foouser --display-name foo > /tmp/user.json

- python:
    host.a: |
      import boto3
      import json

      with open('/tmp/user.json', 'rt') as f:
          info = json.loads(f.read())
      s3 = boto3.resource(
          's3',
          aws_access_key_id=info['keys'][0]['access_key'],
          aws_secret_access_key=info['keys'][0]['secret_key'],
          endpoint_url='http://localhost:8800',
      )
      bucket = s3.Bucket('foobucket')
      bucket.create()
      bucket.put_object(Key='myobject', Body='thebody')

- stoneadm.shell:
    host.a:
      - stone nfs export create rgw --bucket foobucket --cluster-id foo --pseudo-path /foobucket 

- stoneadm.wait_for_service:
    service: nfs.foo
- stoneadm.wait_for_service:
    service: ingress.nfs.foo

## export and mount

- vip.exec:
    host.a:
      - mkdir /mnt/foo
      - sleep 5
      - mount -t nfs {{VIP0}}:/foobucket /mnt/foo
      - find /mnt/foo -ls
      - grep thebody /mnt/foo/myobject
      - echo test > /mnt/foo/newobject
      - sync

- python:
    host.a: |
      import boto3
      import json
      from io import BytesIO

      with open('/tmp/user.json', 'rt') as f:
          info = json.loads(f.read())
      s3 = boto3.resource(
          's3',
          aws_access_key_id=info['keys'][0]['access_key'],
          aws_secret_access_key=info['keys'][0]['secret_key'],
          endpoint_url='http://localhost:8800',
      )
      bucket = s3.Bucket('foobucket')
      data = BytesIO()
      bucket.download_fileobj(Fileobj=data, Key='newobject')
      print(data.getvalue())
      assert data.getvalue().decode() == 'test\n'

- vip.exec:
    host.a:
      - umount /mnt/foo

- stoneadm.shell:
    host.a:
      - stone nfs export rm foo /foobucket
      - stone nfs cluster rm foo
