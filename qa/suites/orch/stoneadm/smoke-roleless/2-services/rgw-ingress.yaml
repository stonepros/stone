tasks:
- vip:

# make sure stoneadm notices the new IP
- stoneadm.shell:
    host.a:
      - stone orch device ls --refresh

# deploy rgw + ingress
- stoneadm.apply:
    specs:
      - service_type: rgw
        service_id: foo
        placement:
          count: 4
          host_pattern: "*"
        spec:
          rgw_frontend_port: 8000
      - service_type: ingress
        service_id: rgw.foo
        placement:
          count: 2
        spec:
          backend_service: rgw.foo
          frontend_port: 9000
          monitor_port: 9001
          virtual_ip: "{{VIP0}}/{{VIPPREFIXLEN}}"
- stoneadm.wait_for_service:
    service: rgw.foo
- stoneadm.wait_for_service:
    service: ingress.rgw.foo

# take each component down in turn and ensure things still work
- stoneadm.shell:
    host.a:
      - |
        echo "Check while healthy..."
        curl http://{{VIP0}}:9000/

        # stop each rgw in turn
        echo "Check with each rgw stopped in turn..."
        for rgw in `stone orch ps | grep ^rgw.foo. | awk '{print $1}'`; do
          stone orch daemon stop $rgw
          while ! stone orch ps | grep $rgw | grep stopped; do sleep 1 ; done
          while ! curl http://{{VIP0}}:9000/ ; do sleep 1 ; done
          stone orch daemon start $rgw
          while ! stone orch ps | grep $rgw | grep running; do sleep 1 ; done
        done

        # stop each haproxy in turn
        echo "Check with each haproxy down in turn..."
        for haproxy in `stone orch ps | grep ^haproxy.rgw.foo. | awk '{print $1}'`; do
          stone orch daemon stop $haproxy
          while ! stone orch ps | grep $haproxy | grep stopped; do sleep 1 ; done
          while ! curl http://{{VIP0}}:9000/ ; do sleep 1 ; done
          stone orch daemon start $haproxy
          while ! stone orch ps | grep $haproxy | grep running; do sleep 1 ; done
        done

        while ! curl http://{{VIP0}}:9000/ ; do sleep 1 ; done
