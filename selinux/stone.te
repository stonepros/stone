policy_module(stone, 1.1.1)

require {
	type sysfs_t;
	type configfs_t;
	type commplex_main_port_t;
	type http_cache_port_t;
	type rpm_exec_t;
	type rpm_var_lib_t;
	type kernel_t;
	type var_run_t;
	type random_device_t;
	type urandom_device_t;
	type setfiles_t;
	type nvme_device_t;
	type targetd_etc_rw_t;
	type amqp_port_t;
	type soundd_port_t;
	class sock_file unlink;
	class tcp_socket name_connect_t;
	class lnk_file { create getattr read unlink };
	class dir { add_name create getattr open read remove_name rmdir search write };
	class file { create getattr open read rename unlink write ioctl };
	class blk_file { getattr ioctl open read write };
	class capability2 block_suspend;
	class process2 { nnp_transition nosuid_transition };
}

########################################
#
# Declarations
#

type stone_t;
type stone_exec_t;
init_daemon_domain(stone_t, stone_exec_t)
stone_exec(stone_t)

permissive stone_t;

type stone_initrc_exec_t;
init_script_file(stone_initrc_exec_t)

type stone_log_t;
logging_log_file(stone_log_t)

type stone_var_lib_t;
files_type(stone_var_lib_t)

type stone_var_run_t;
files_pid_file(stone_var_run_t)

########################################
#
# stone local policy
#

allow stone_t self:process { signal_perms };
allow stone_t self:fifo_file rw_fifo_file_perms;
allow stone_t self:unix_stream_socket create_stream_socket_perms;
allow stone_t self:capability { setuid setgid dac_override dac_read_search };
allow stone_t self:capability2 block_suspend;

manage_dirs_pattern(stone_t, stone_log_t, stone_log_t)
manage_files_pattern(stone_t, stone_log_t, stone_log_t)
manage_lnk_files_pattern(stone_t, stone_log_t, stone_log_t)

manage_dirs_pattern(stone_t, stone_var_lib_t, stone_var_lib_t)
manage_files_pattern(stone_t, stone_var_lib_t, stone_var_lib_t)
manage_lnk_files_pattern(stone_t, stone_var_lib_t, stone_var_lib_t)

manage_dirs_pattern(stone_t, stone_var_run_t, stone_var_run_t)
manage_files_pattern(stone_t, stone_var_run_t, stone_var_run_t)
manage_lnk_files_pattern(stone_t, stone_var_run_t, stone_var_run_t)

kernel_read_system_state(stone_t)
kernel_read_network_state(stone_t)
allow stone_t kernel_t:system module_request;

corenet_all_recvfrom_unlabeled(stone_t)
corenet_all_recvfrom_netlabel(stone_t)
corenet_udp_sendrecv_generic_if(stone_t)
corenet_udp_sendrecv_generic_node(stone_t)
corenet_udp_bind_generic_node(stone_t)
corenet_tcp_bind_generic_node(stone_t)

corenet_sendrecv_cyphesis_server_packets(stone_t)
corenet_tcp_bind_cyphesis_port(stone_t)
corenet_tcp_sendrecv_cyphesis_port(stone_t)

allow stone_t commplex_main_port_t:tcp_socket name_connect;
allow stone_t http_cache_port_t:tcp_socket name_connect;
allow stone_t amqp_port_t:tcp_socket name_connect;
allow stone_t soundd_port_t:tcp_socket name_connect;

corecmd_exec_bin(stone_t)
corecmd_exec_shell(stone_t)

allow stone_t rpm_exec_t:file getattr;
allow stone_t rpm_var_lib_t:dir { add_name write };
allow stone_t rpm_var_lib_t:file { create open };

dev_read_urand(stone_t)

domain_read_all_domains_state(stone_t)

fs_getattr_all_fs(stone_t)

auth_use_nsswitch(stone_t)

logging_send_syslog_msg(stone_t)

sysnet_dns_name_resolve(stone_t)

udev_read_db(stone_t)

allow stone_t nvme_device_t:blk_file { getattr ioctl open read write };

# basis for future security review
allow stone_t stone_var_run_t:sock_file { create unlink write setattr };
allow stone_t self:capability { sys_rawio chown };

allow stone_t self:tcp_socket { accept listen };
corenet_tcp_connect_cyphesis_port(stone_t)
corenet_tcp_connect_generic_port(stone_t)
files_list_tmp(stone_t)
files_manage_generic_tmp_files(stone_t)
fstools_exec(stone_t)
nis_use_ypbind_uncond(stone_t)
storage_raw_rw_fixed_disk(stone_t)
files_manage_generic_locks(stone_t)
libs_exec_ldconfig(stone_t)
fs_list_hugetlbfs(stone_t)
fs_list_tmpfs(stone_t)
fs_read_cgroup_files(stone_t)
fs_read_tmpfs_symlinks(stone_t)
fs_search_cgroup_dirs(stone_t)
stone_read_lib_files(init_t)

allow stone_t sysfs_t:dir read;
allow stone_t sysfs_t:file { read getattr open };
allow stone_t sysfs_t:lnk_file { read getattr };

allow stone_t configfs_t:dir { add_name create getattr open read remove_name rmdir search write };
allow stone_t configfs_t:file { getattr open read write ioctl };
allow stone_t configfs_t:lnk_file { create getattr read unlink };


allow stone_t random_device_t:chr_file getattr;
allow stone_t urandom_device_t:chr_file getattr;
allow stone_t self:process setpgid;
allow stone_t self:process setsched;
allow stone_t var_run_t:dir { write create add_name };
allow stone_t var_run_t:file { read write create open getattr };
allow stone_t init_var_run_t:file getattr;
allow init_t stone_t:process2 { nnp_transition nosuid_transition };

allow stone_t targetd_etc_rw_t:dir { getattr search };

fsadm_manage_pid(stone_t)

#============= setfiles_t ==============
allow setfiles_t stone_var_lib_t:file write;
